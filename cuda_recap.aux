\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\babel@aux[2]{}
\@nameuse{bbl@beforestart}
\abx@aux@refcontext{nty/global//global/global}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\babel@aux{english}{}
\newlabel{section:dictionary}{{}{3}{Dictionary}{section*.3}{}}
\abx@aux@cite{0}{tuomanen2018hands}
\abx@aux@segm{0}{0}{tuomanen2018hands}
\@writefile{toc}{\contentsline {section}{\numberline {1}Basics of Architecture}{4}{section.1}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Schematic difference in architecture between the CPU and the GPU. Without going into details (\sout {as mentionned in the disclaimer, the author have not studied it in depth}), one may be able to see that the GPU has many smaller ALU's. They are less powerful than those of the CPU and don't stand a chance in a theoretical \textit  {1v1 battle}, but may do enough damage, when working together.\relax }}{5}{figure.caption.5}\protected@file@percent }
\providecommand*\caption@xref[2]{\@setref\relax\@undefined{#1}}
\newlabel{cpuvsgpu}{{1}{5}{Schematic difference in architecture between the CPU and the GPU. Without going into details (\sout {as mentionned in the disclaimer, the author have not studied it in depth}), one may be able to see that the GPU has many smaller ALU's. They are less powerful than those of the CPU and don't stand a chance in a theoretical \textit {1v1 battle}, but may do enough damage, when working together.\relax }{figure.caption.5}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.1}Execution abstraction}{5}{subsection.1.1}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{\underline  {Threads}}{5}{section*.6}\protected@file@percent }
\newlabel{blocks}{{1.1}{5}{\underline {Blocks}}{section*.7}{}}
\@writefile{toc}{\contentsline {paragraph}{\underline  {Blocks}}{5}{section*.7}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{\underline  {Grid}}{6}{section*.8}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{The mapping abstraction}{6}{section*.9}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces \relax }}{6}{figure.caption.10}\protected@file@percent }
\newlabel{abstraction}{{2}{6}{\relax }{figure.caption.10}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.2}Parallel execution and warps}{7}{subsection.1.2}\protected@file@percent }
\newlabel{warps}{{1.2}{7}{Parallel execution and warps}{subsection.1.2}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.3}Memory model}{7}{subsection.1.3}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces \relax }}{7}{figure.caption.12}\protected@file@percent }
\newlabel{coalesced}{{3}{7}{\relax }{figure.caption.12}{}}
\@writefile{toc}{\contentsline {paragraph}{Coalesced vs uncoalesced memory access.}{7}{figure.caption.12}\protected@file@percent }
\newlabel{coalescedquote}{{1.3}{8}{Coalesced vs uncoalesced memory access}{figure.caption.12}{}}
\@writefile{toc}{\contentsline {paragraph}{\underline  {Global memory}}{8}{section*.13}\protected@file@percent }
\newlabel{grocery_store}{{1.3}{8}{\underline {Shared memory}}{section*.14}{}}
\@writefile{toc}{\contentsline {paragraph}{\underline  {Shared memory}}{8}{section*.14}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Bank conflicts.}{8}{section*.15}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces Memory banks serving the threads. Only one thread can access a bank with a certain ID simultaneously. From the analogy, threads are clients, and banks are waiters, giving them memory.\relax }}{9}{figure.caption.16}\protected@file@percent }
\newlabel{banks}{{4}{9}{Memory banks serving the threads. Only one thread can access a bank with a certain ID simultaneously. From the analogy, threads are clients, and banks are waiters, giving them memory.\relax }{figure.caption.16}{}}
\@writefile{toc}{\contentsline {paragraph}{Read-only memory$\ast $}{9}{section*.17}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Local registers}{9}{section*.18}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.4}Memor allocation model}{10}{subsection.1.4}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {2}Programming in CUDA}{10}{section.2}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{}{10}{section*.19}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}Setup}{10}{subsection.2.1}\protected@file@percent }
\@writefile{lol}{\contentsline {listing}{\numberline {1}{\ignorespaces Compiling with nvcc and launching a CUDA program on Linux\relax }}{11}{listing.1}\protected@file@percent }
\newlabel{nvcc_cuda}{{1}{11}{Compiling with nvcc and launching a CUDA program on Linux\relax }{listing.1}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.1.1}Hello from CUDA}{11}{subsubsection.2.1.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2}Threads \& blocks indexing}{11}{subsection.2.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3}Memory}{12}{subsection.2.3}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.3.1}Vector addition}{12}{subsubsection.2.3.1}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{A more complex indexing.}{12}{section*.20}\protected@file@percent }
\newlabel{tindexing}{{\caption@xref {tindexing}{ on input line 525}}{13}{A more complex indexing}{figure.caption.21}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces Simple example to illustrate a simple 1D indexing (supposing a block contains 4 threads). We see how the expression \textsc  {blockIdx.x*blockDim.x+threadIdx.x} is used (see below). One can easily extrapolate the indexing to 2D and 3D cases, as described in the Nvidia documentation above. \relax }}{13}{figure.caption.21}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Allocate memory on host.}{14}{section*.22}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Allocate memory on device.}{14}{section*.23}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Data copying}{14}{section*.24}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Calculation.}{15}{section*.25}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Terminating.}{15}{section*.26}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.3.2}Multiple dimension memory}{15}{subsubsection.2.3.2}\protected@file@percent }
\newlabel{fig:pitch}{{2.3.2}{16}{Multiple dimension memory}{subsubsection.2.3.2}{}}
\newlabel{allocation2d}{{\caption@xref {allocation2d}{ on input line 712}}{16}{Multiple dimension memory}{subsubsection.2.3.2}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.4}Shared memory vs global memory}{17}{subsection.2.4}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Global}{17}{section*.27}\protected@file@percent }
\newlabel{intermezzo1d2d}{{2.4}{18}{Global}{section*.27}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces Scheme of 2D matrix multiplication, using Shared memory\relax }}{19}{figure.caption.28}\protected@file@percent }
\newlabel{global2d}{{6}{19}{Scheme of 2D matrix multiplication, using Shared memory\relax }{figure.caption.28}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {7}{\ignorespaces Bank conflicts\relax }}{23}{figure.caption.30}\protected@file@percent }
\newlabel{fig:bankconflicts2}{{7}{23}{Bank conflicts\relax }{figure.caption.30}{}}
\@writefile{toc}{\contentsline {paragraph}{Bank conflicts.}{23}{section*.31}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.5}More remarks on memory}{24}{subsection.2.5}\protected@file@percent }
\newlabel{quote:pinned_pageable}{{2.5}{24}{More remarks on memory}{subsection.2.5}{}}
\newlabel{fig:static}{{8a}{25}{Fixed rod length and varying mass\relax }{figure.caption.32}{}}
\newlabel{sub@fig:static}{{a}{25}{Fixed rod length and varying mass\relax }{figure.caption.32}{}}
\newlabel{fig:dynamic}{{8b}{25}{Fixed mass and varying rod length\relax }{figure.caption.32}{}}
\newlabel{sub@fig:dynamic}{{b}{25}{Fixed mass and varying rod length\relax }{figure.caption.32}{}}
\newlabel{fig:reduce}{{\caption@xref {fig:reduce}{ on input line 1051}}{25}{Reduce}{figure.caption.32}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {8}{\ignorespaces Static method for measuring the linear relation $\theta (m)$ and $\theta (l)$. The shear modulus is computed based on the linear fit.\relax }}{25}{figure.caption.32}\protected@file@percent }
\newlabel{mem_alloc}{{2.5}{25}{More remarks on memory}{subsection.2.5}{}}
\@writefile{toc}{\contentsline {section}{\numberline {3}Basic parallel algorithms \& patterns}{25}{section.3}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}Reduce}{25}{subsection.3.1}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {9}{\ignorespaces The description of every iterationion, for the global memory reuction kernel. Note the how stride is doubling every iteration, ,and how the elements are accumulating in the very first (0th) element of the output data. One should understand, that the code works for arbitrary number of blocks, as we're working with global memory, visible to all threads in all blocks\relax }}{26}{figure.caption.34}\protected@file@percent }
\newlabel{fig:reduced_global_only}{{9}{26}{The description of every iterationion, for the global memory reuction kernel. Note the how stride is doubling every iteration, ,and how the elements are accumulating in the very first (0th) element of the output data. One should understand, that the code works for arbitrary number of blocks, as we're working with global memory, visible to all threads in all blocks\relax }{figure.caption.34}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {10}{\ignorespaces \relax }}{27}{figure.caption.35}\protected@file@percent }
\newlabel{fig:shared_reduce}{{10}{27}{\relax }{figure.caption.35}{}}
\@writefile{toc}{\contentsline {section}{\numberline {4}CUDA synchronization mechanisms}{31}{section.4}\protected@file@percent }
\newlabel{coop_group}{{\caption@xref {coop_group}{ on input line 1313}}{32}{Cooperative groups}{figure.caption.42}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {11}{\ignorespaces This method, is \sout {almost} the same as the first, optimized version of the reduce algorithm, using the shared memory \autoref  {}. Therefore, one must note that this reduce_sum() method must be called for the array temp*, located in the shared memory.\relax }}{32}{figure.caption.42}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.1}Atomics}{32}{subsection.4.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2}Thread block synchronization}{32}{subsection.4.2}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {5}Streams}{32}{section.5}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {6}Optimization}{32}{section.6}\protected@file@percent }
\gdef\minted@oldcachelist{,
  default.pygstyle,
  FFF948578FF3C46DD4B1234B514EC97B6CE4D031E15A19509DAC34CF701726F9.pygtex,
  1FB94A077693A5AD6CA393CF717E6098F61CA896C2C5BA477D604222D63AEC2B.pygtex,
  B96FAA6429685F5614AE78B0580E72ACF61CA896C2C5BA477D604222D63AEC2B.pygtex,
  F7E73DAAE7BD9D4072D11C2C49769BAA6CE4D031E15A19509DAC34CF701726F9.pygtex,
  BC7DC250D6880A0A6F354DAA2DB789CCF61CA896C2C5BA477D604222D63AEC2B.pygtex,
  7BF76E1BF78C042B89DF2BD85E59A9EAF61CA896C2C5BA477D604222D63AEC2B.pygtex,
  8CEDDAB4EE79835AFA34120222095CC8F61CA896C2C5BA477D604222D63AEC2B.pygtex,
  AC6C500554DAA56E35E841B33237F161A5DC30074FCB67BC91FF7EABBA4BA102.pygtex,
  363CBEB6B9DD66691DC64C935D95E611F61CA896C2C5BA477D604222D63AEC2B.pygtex,
  17E62D62AAAF6F35D6A2C15FDF86B1B3F61CA896C2C5BA477D604222D63AEC2B.pygtex,
  A045EC4408B2E1A2C3645F34DEFDF650A51F2EC8665C2BC7FCCE12A9CEBC4CBC.pygtex,
  B8C4EA80CD8252B206968A967C50DAB8F61CA896C2C5BA477D604222D63AEC2B.pygtex,
  D6D6039EF99DCE141AFBE3845B8042FDF61CA896C2C5BA477D604222D63AEC2B.pygtex,
  878920073D774616185A26A90F94C7286CE4D031E15A19509DAC34CF701726F9.pygtex}
\@writefile{toc}{\contentsline {section}{\numberline {7}Minimal developpers tools}{33}{section.7}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {8}Appendix}{33}{section.8}\protected@file@percent }
\newlabel{App.:Primitive operations}{{8}{33}{Improving with primitive operations}{section*.44}{}}
\@writefile{lol}{\contentsline {listing}{\numberline {2}{\ignorespaces Compiling with nvcc and launching a CUDA program on Linux\relax }}{33}{listing.2}\protected@file@percent }
\newlabel{nvcc_cuda}{{2}{33}{Compiling with nvcc and launching a CUDA program on Linux\relax }{listing.2}{}}
\abx@aux@read@bbl@mdfivesum{nobblfile}
\abx@aux@read@bblrerun
\gdef \@abspage@last{33}
